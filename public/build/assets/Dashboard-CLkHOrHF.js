import{_ as k}from"./AppLayout-DGhrBq6E.js";import{d as v,q as O,z as r,A as b,c as x,o as U}from"./app-By_hQbVH.js";import"./ChannelListSidebar-Cq7gRj-H.js";import"./Modal-BHBt070w.js";import"./PrimaryButton-oli2Q4v1.js";import"./SecondaryButton-B2IxC0zr.js";const B={__name:"Dashboard",props:{channels:Array,messages:Array},setup(C){var m,y;const t=C;console.log("=== Dashboard Component Debug ==="),console.log("Dashboard props:",t),console.log("Channels prop type:",typeof t.channels),console.log("Channels prop:",t.channels),console.log("Channels prop length:",(m=t.channels)==null?void 0:m.length),console.log("Messages prop type:",typeof t.messages),console.log("Messages prop:",t.messages),console.log("Messages prop length:",(y=t.messages)==null?void 0:y.length);const n=v((t.channels||[]).map((e,a)=>({...e,active:a===0}))),s=v(t.messages||[]),l=v(n.value.find(e=>e.active));console.log("Initial channels ref:",n.value),console.log("Initial messages ref:",s.value),console.log("Active channel:",l.value);const c=v([]);let i=null;const g=v(!1),w=()=>{c.value=[]},M=e=>{g.value=e,g.value?(r.post("/user-online-status",{online:!1}),i&&clearInterval(i)):(r.post("/user-online-status",{online:!0}),p())},h=async()=>{try{console.log("Fetching online status...");const e=await r.get("/user-online-status");console.log("Online status response:",e),console.log("Response data:",e.data),e.data&&Array.isArray(e.data)?(console.log("Processing online status data..."),c.value=e.data.map(a=>{var o;return console.log("Processing status:",a),{id:a.user_id,name:((o=a.user)==null?void 0:o.name)||"Unknown",online:a.online===!0||a.online===1||a.online==="1",active:!1}}),console.log("Final directMessages:",c.value)):(console.warn("Invalid response format from API"),c.value=[])}catch(e){console.error("Failed to fetch user online status:",e),c.value=[]}};function p(){i&&clearInterval(i),i=setInterval(async()=>{if(!g.value)try{await r.get("/user-online-status-update")}catch{}try{await h()}catch{}},1e4)}O(async()=>{console.log("=== Dashboard Component Mounted ==="),n.value=(t.channels||[]).map((e,a)=>({...e,active:a===0})),s.value=t.messages||[],l.value=n.value.find(e=>e.active),w(),console.log("Mounted channels:",n.value),console.log("Mounted messages:",s.value),console.log("Mounted active channel:",l.value),l.value?(console.log("Loading messages for channel:",l.value.id),u(l.value.id)):console.log("No active channel found");try{console.log("Updating own online status...");const e=document.head.querySelector('meta[name="csrf-token"]');e?console.log("CSRF token found:",e.content):console.warn("CSRF token not found"),await r.get("/user-online-status-update"),console.log("Own online status updated successfully")}catch(e){console.error("Failed to update own online status:",e),e.response&&e.response.status===419&&console.error("CSRF token error - page may need to be refreshed")}try{await h()}catch(e){console.error("Initial fetchOnlineStatus failed:",e),c.value=[]}p()}),b(()=>{i&&clearInterval(i)});const u=async e=>{n.value=n.value.map(a=>({...a,active:a.id===e})),l.value=n.value.find(a=>a.active);try{const a=await r.get(`/messages?channel_id=${e}`);s.value=a.data}catch(a){console.error("Failed to fetch messages:",a),s.value=[]}},A=async e=>{var a;console.log("New channel added:",e);try{const o=await r.get("/channels");console.log("Channels API response:",o.data);const d=o.data.channels||[];console.log("Updated channels:",d),n.value=d.map(f=>({...f,active:f.id===e.id})),console.log("Updated channels.value:",n.value),l.value=n.value.find(f=>f.active),console.log("Active channel:",l.value),l.value&&await u(l.value.id)}catch(o){console.error("Failed to refresh channels after creation:",o),console.error("Error response:",(a=o.response)==null?void 0:a.data),n.value=n.value.map(d=>({...d,active:!1})),n.value.push({...e,active:!0}),l.value=n.value.find(d=>d.active),l.value&&await u(l.value.id)}},D=e=>{s.value.unshift(e)},S=e=>{const a=s.value.findIndex(o=>o.id===e.id);a!==-1&&(s.value[a]=e)},_=e=>{const a=s.value.findIndex(o=>o.id===e);a!==-1&&s.value.splice(a,1)},F=async e=>{console.log("Channel deleted:",e),n.value=n.value.filter(a=>a.id!==e),l.value&&l.value.id===e&&(n.value.length>0?await u(n.value[0].id):(l.value=null,s.value=[]))},I=async e=>{console.log("Channel left:",e),n.value=n.value.filter(a=>a.id!==e),l.value&&l.value.id===e&&(n.value.length>0?await u(n.value[0].id):(l.value=null,s.value=[]))};return(e,a)=>(U(),x(k,{title:"Dashboard",channels:n.value,"direct-messages":c.value,messages:s.value,"active-channel":l.value,"manual-offline":g.value,onToggleManualOffline:M,onSelectChannel:u,onNewChannelAdded:A,onMessageSent:D,onMessageUpdated:S,onMessageDeleted:_,onChannelDeleted:F,onChannelLeft:I},null,8,["channels","direct-messages","messages","active-channel","manual-offline"]))}};export{B as default};
